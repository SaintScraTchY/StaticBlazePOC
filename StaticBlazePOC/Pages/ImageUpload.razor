@page "/image-upload"
@using System.Net
@using StaticBlazePOC.Models
@using StaticBlazePOC.Services
@inject GitHubService GitHubService

<h3>Upload Image</h3>

<EditForm Model="@gitUpload" OnValidSubmit="UploadImage">
    <InputFile OnChange="OnInputFileChange" />
    <br/>
    <InputText @bind-Value="@gitUpload.GitFilePath" placeholder="File Path (e.g., images/photo.jpg)" />
    <br/>
    <InputText @bind-Value="@gitUpload.GitRepo" placeholder="GitHub Repo" />
    <br/>
    <InputText @bind-Value="@gitUpload.GitAccount" placeholder="GitHub UserName" />
    <button type="submit">Upload</button>
</EditForm>

@code {

    private FileGitUploadModel gitUpload = new FileGitUploadModel()
    {
        GitAccount = "your-github-account",
        GitRepo = "your-github-repo",
        GitFilePath = "images/photo.jpg",
        GitHubPat = SecretHolder.PatToken
    };

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        using var stream = e.File.OpenReadStream();
        using var memoryStream = new MemoryStream();
        stream.CopyTo(memoryStream);
        gitUpload.ImageBytes = memoryStream.ToArray();
    }

    private async Task<HttpStatusCode> UploadImage()
    {
        try
        {
            if (string.IsNullOrWhiteSpace( gitUpload.GitHubPat))
            {
                Console.WriteLine("Please provide a GitHub Personal Access Token (PAT)!");
                return HttpStatusCode.BadRequest;
            }
            await GitHubService.PushImageFile(gitUpload.GitAccount, gitUpload.GitRepo, gitUpload.GitFilePath, gitUpload.ImageBytes, gitUpload.GitHubPat);
            Console.WriteLine("Image uploaded successfully!");
            return HttpStatusCode.OK;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }

        return HttpStatusCode.InternalServerError;
    }
}